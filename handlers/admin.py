from aiogram.dispatcher.filters.state import State,StatesGroup
from telethon.tl import functions
from config import BOT_ACCESS_HASH, BOT_USER_ID
from create_bot import client, dp
from handlers.client import *
from keyboards.admin_kb import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message
from database.sqlite_db import sql_create_room, sql_show_all_rooms, sql_delete_room, check_which_room,kick_student_from_room,kick_teacher_from_room,check_teacher_or_student_kick,sql_show_enter_teacher_code_rooms,get_teacher_user_id,\
get_enter_teacher_code_using_room_number,get_enter_student_code_using_room_number,get_student_user_id,get_room_status,update_enter_teacher_code,update_enter_student_code,get_chat_id,check_room_exist
from aiogram.dispatcher.filters import Text





from telethon.sync import TelegramClient

from telethon.tl import types as tele_types

import random

data = []
#await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)        # –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–ª–±–µ–∫–∞



class FSMAdmin(StatesGroup):
    teacher = State()
    student = State()
    delete_room = State()
    kick_from_room = State()





#–ö–Ω–æ–ø–∫–∞ –≤—Å—ñ –∫—ñ–º–Ω–∞—Ç–∏
@dp.callback_query_handler(text = ['all_rooms'])
async def show_allyryr_rooms(call: types.CallbackQuery):

    rooms = await sql_show_all_rooms()
    codes = await sql_show_enter_teacher_code_rooms()
    await bot.send_message(call.from_user.id, text='üëæ---------------- –Ü—Å–Ω—É—é—á—ñ –∫—ñ–º–Ω–∞—Ç–∏ ----------------üëæ')
    for room in rooms:
        #await bot.send_message(call.from_user.id, text='---------------- –Ü—Å–Ω—É—é—á—ñ –∫—ñ–º–Ω–∞—Ç–∏ ----------------')  # –ë–î –¥–ª—è –∫—ñ–º–Ω–∞—Ç
        #await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

        tmp1 = await get_enter_teacher_code_using_room_number(room[0])
        tmp2 = await get_enter_student_code_using_room_number(room[0])
        tmp3 = await get_teacher_user_id(room[0])
        tmp4 = await get_student_user_id(room[0])
        tmp5 = await get_room_status(room[0])
        tmp6 = await get_chat_id(room[0])



        await bot.send_message(call.from_user.id ,text = f'–ö—ñ–º–Ω–∞—Ç–∞: <code>{ room[0]}</code> \n'
                                                         f'ID –í—á–∏—Ç–µ–ª—è: <code>{ tmp3 }</code>\n'
                                                         f'ID –£—á–Ω—è: <code>{ tmp4 }</code>\n'
                                                         f'–ö–æ–¥ –¥–æ–ø—É—Å–∫—É –≤—á–∏—Ç–µ–ª—è: <code>{ tmp1}</code>\n'
                                                         f'–ö–æ–¥ –¥–æ–ø—É—Å–∫—É —É—á–Ω—è:  <code>{ tmp2}</code>\n'
                                                         f'–°—Ç–∞—Ç—É—Å –∫—ñ–º–Ω–∞—Ç–∏: {tmp5}\n'
                                                         f'–ß–∞—Ç-id —ñ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏: <code>{tmp6}</code>')  #–ë–î –¥–ª—è –∫—ñ–º–Ω–∞—Ç
    await bot.send_message(call.from_user.id, text='üëæ-------------------------------------------------------------üëæ')









# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
@dp.callback_query_handler(text = ['create_room'])
async def createe_rooms(call: types.CallbackQuery):
    #await FSMAdmin.teacher.set()
    room_number = random.randint(100, 10000)
    enter_code_for_teacher = random.randint(100000, 100000000)
    enter_code_for_student = random.randint(100000, 100000000)
    await bot.send_message(call.from_user.id,text = f'‚úîÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.\n#Ô∏è‚É£ –ù–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏: {room_number}'
                                                    f' \nüë®‚ÄçüíºÔ∏è –ù–æ–º–µ—Ä –≤—Ö–æ–¥—É –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –¥–ª—è –≤—á–∏—Ç–µ–ª—è: <code>{ enter_code_for_teacher }</code>'
                                                    f'\nüôãÔ∏è –ù–æ–º–µ—Ä –≤—Ö–æ–¥—É –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ –¥–ª—è —É—á–Ω—è: <code>{ enter_code_for_student }</code>')

    room_status = 'Not Active'



    #await sql_create_room(room_number, enter_code_for_teacher, enter_code_for_student,room_status)   # –Ω–µ–≤—ñ–¥–æ–º—ñ —Ç–≥-id –≤—á–∏—Ç–µ–ª—è —ñ —É—á–Ω—è


   # –¥–æ–±–∞–≤–ª—è–Ω–Ω—è —Å–º—Å –≤ —á–∞—Ç–∏
    new_chat = await client(functions.messages.CreateChatRequest(
        users=[tele_types.InputUser(access_hash=BOT_ACCESS_HASH, user_id=BOT_USER_ID)], title=f'–ö—ñ–º–Ω–∞—Ç–∞: {room_number}'))
    print(new_chat.chats[0].id)

    # —Ñ—É–Ω–∫—Ü—ñ—è –≤ –±–¥
    await sql_create_room(room_number, enter_code_for_teacher, enter_code_for_student, room_status,new_chat.chats[0].id,0)

    #await bot.send_message(-new_chat.chats[0].id,)





@dp.callback_query_handler(text = ['delete_room'],state=None)
async def delete_room_by_number(call: types.CallbackQuery):
    await FSMAdmin.delete_room.set()
    await bot.send_message(call.from_user.id, text=" ‚ö†Ô∏è–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏, –∫–æ—Ç—Ä—É –≤–∏–¥–∞–ª–∏—Ç–∏:\n "
                                                   "( –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü—é –¥—ñ—é, –≤–≤–µ–¥—ñ—Ç—å: –í/–≤—ñ–¥–º—ñ–Ω–∞ )")

    #await delete_room(call.message.text)





@dp.message_handler(state='*', commands='–≤—ñ–¥–º—ñ–Ω–∞')
@dp.message_handler(Text(equals='–≤—ñ–¥–º—ñ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("üî∞ –û–∫, –≤–∏ –∑—É–ø–∏–Ω–∏–ª–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É")





@dp.message_handler(state=FSMAdmin.delete_room)
async def delete_step_2(message: types.Message, state: FSMContext):

    data = message.text
    check_room_exists = await check_room_exist(data)
    if check_room_exists:
        await sql_delete_room(data)
        await bot.send_message(message.from_user.id,
                               "‚úÖ –ö—ñ–º–Ω–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—É –¥—ñ—é")
        print("1")
        await state.finish()
    else:
        await bot.send_message(message.from_user.id, "‚ùó –ö—ñ–º–Ω–∞—Ç–∏ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ —ó—ó –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏ –∑–Ω–æ–≤—É: ")
        await FSMAdmin.delete_room.set()





@dp.callback_query_handler(text = ['kick_someone_from_room'],state=None)
async def delete_room_by_number(call: types.CallbackQuery):
    await FSMAdmin.kick_from_room.set()
    # —Ñ—É–Ω–∫—Ü—ñ—è –±–¥,–≤–∏–≤–æ–¥–∏—Ç—å –≤—Å—é —ñ–Ω—Ñ—É –ø—Ä–æ –∫—ñ–º–Ω–∞—Ç–∏
    await bot.send_message(call.from_user.id, text="üÜî –ù–∞–ø–∏—à—ñ—Ç—å id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏: \n"
                                                   "( –©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü—é –¥—ñ—é, –≤–≤–µ–¥—ñ—Ç—å: –í(–≤)—ñ–¥–º—ñ–Ω–∞ )")

    #await delete_room(call.message.text)



@dp.message_handler(state='*', commands='–≤—ñ–¥–º—ñ–Ω–∞')
@dp.message_handler(Text(equals='–≤—ñ–¥–º—ñ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("üî∞ –û–∫, –≤–∏ –∑—É–ø–∏–Ω–∏–ª–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É")



@dp.message_handler(state=FSMAdmin.kick_from_room)
async def kick_heandlear(message: types.Message, state: FSMContext):
    data = message.text
    check_teacher_or_student_for_kick  = await check_teacher_or_student_kick(data)

    if check_teacher_or_student_for_kick == 'teacher':
        new_enter_code_for_teacher = random.randint(100000, 100000000)
        await update_enter_teacher_code(new_enter_code_for_teacher, data)
        await kick_teacher_from_room(data)
        await bot.send_message(message.from_user.id,
                               "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(–≤—á–∏—Ç–µ–ª—è) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
        await state.finish()


    elif check_teacher_or_student_for_kick == 'student':
        new_enter_code_for_student = random.randint(100000, 100000000)
        await update_enter_student_code(new_enter_code_for_student, data)
        await kick_student_from_room(data)
        await bot.send_message(message.from_user.id,
                               "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(—É—á–Ω—è) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—É –¥—ñ—é")
        await state.finish()
    else:

        await bot.send_message(message.from_user.id,"‚ùóÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º id –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –π–æ–≥–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–æ–≤—É: ")
        await FSMAdmin.kick_from_room.set()


    #await state.finish()

    #print("222")



#–≤–∏—Ö—ñ–¥ —ñ–∑ –º–∞—à–∏–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π

